{"version":3,"sources":["components/Header/Header.js","hooks/form.js","components/todo/List.js","components/todo/TodoList.js","context/Settings.js","components/todo/todo.js","app.js","index.js"],"names":["Header","className","Group","Heading","Divider","icon","text","useForm","callback","useState","values","setValues","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","List","props","interactive","elevation","Elevation","TWO","completeList","map","item","assignee","difficulty","id","TodoList","paginate","type","class","onClick","deleteItem","toggleComplete","complete","SettingContext","React","createContext","Settings","Provider","pagination","hide","listComplete","children","ToDo","settingValue","useContext","list","setList","endpage","setendpage","incomplete","setIncomplete","console","log","uuid","show","setShow","setcompleteList","useEffect","incompleteCount","filter","length","document","title","showIfComplete","push","onSubmit","label","onChange","placeholder","defaultValue","min","max","items","e","start","slice","App","Component","Main","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.e9156559.chunk.js","sourcesContent":["import React from \"react\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport {Navbar,\n    NavbarDivider,\n    NavbarGroup,\n    NavbarHeading,\n    Button,\n} from \"@blueprintjs/core\";\n\nfunction Header(){\n  return(\n      \n    <Navbar className=\"nav.bp3-navbar\">\n    <Navbar.Group>\n        <Navbar.Heading>To Do List</Navbar.Heading>\n        <Navbar.Divider />\n        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Home\" />\n        <Button className=\"bp3-minimal\" icon=\"settings\" text=\"Settings\" />\n    </Navbar.Group>\n</Navbar>\n\n  )\n}\n\nexport default Header;","import { useState } from 'react';\n\nconst useForm = (callback) => {\n\n  const [values, setValues] = useState({});\n\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n    callback(values);\n  };\n\n  const handleChange = (event) => {\n    event.persist();\n    setValues(values => ({ ...values, [event.target.name]: event.target.value }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n  };\n};\n\nexport default useForm;\n","import React from \"react\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n// import \"~@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport { Card, Elevation } from \"@blueprintjs/core\";\nfunction List(props) {\n    return (\n        <>\n\n            <Card interactive={true} elevation={Elevation.TWO}>\n                <p>Completed Task</p>\n                {props.completeList.map(item => (\n\n                    <div key={item.id}>\n                        <p>{item.text}</p>\n                        <p><small>Assigned to: {item.assignee}</small></p>\n                        <p><small>Difficulty: {item.difficulty}</small></p>\n                        <hr />\n\n                    </div>\n                ))}\n            </Card>\n\n        </>\n\n    );\n\n\n\n\n}\n\nexport default List;","import React from \"react\";\nimport { Button, Card, FormGroup, InputGroup, Elevation, Switch } from \"@blueprintjs/core\";\n\nfunction TodoList(props) {\n    return (\n        <>\n            {props.paginate().map(item => (\n\n                <div key={item.id}>\n                    <p>{item.text}</p>\n                    <p><small>Assigned to: {item.assignee}</small></p>\n                    <p><small>Difficulty: {item.difficulty}</small></p>\n                    <Button type=\"button\" class=\"bp3-button.bp3-intent-danger\" onClick={() => props.deleteItem((item.id))}>delete</Button>\n                    {/* <button onClick={() => deleteItem((item.id))}> delete</button> */}\n                    {/* <Switch  label=\"Complete\" onClick={() => toggleComplete(item.id)}/>{item.complete ? true : false} */}\n                    <div onClick={() =>props.toggleComplete(item.id)}><Button className='bp3-icon'>{item.complete ? \"Complete\" : \"Pending\"}</Button></div>\n\n                    <hr />\n\n                </div>\n            ))}\n        </>\n    )\n}\nexport default TodoList;","import React, { useState } from 'react';\n\nexport const SettingContext = React.createContext();\n\n\nfunction Settings(props){\nconst [pagination, setPagination]=useState(2);\nconst [hide, setHide]=useState(false);\nconst [listComplete, setlistComplete]=useState([]);\n\n// const toggleComplete=()=>setHide(hide===true?false:true)\nconst state={\n    pagination:2,\n    hide:false,\n    listComplete:[]\n}\n\nreturn(\n    <SettingContext.Provider value={state}>\n        {props.children}\n    </SettingContext.Provider>\n)\n\n}\n\nexport default Settings;","import React, { useEffect, useState, useContext } from 'react';\nimport useForm from '../../hooks/form.js';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n// import \"~@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport { Button, Card, FormGroup, InputGroup, Elevation, Switch } from \"@blueprintjs/core\";\nimport List from './List';\nimport TodoList from './TodoList';\n\nimport { v4 as uuid } from 'uuid';\nimport './style.css';\nimport { SettingContext } from '../../context/Settings';\nconst ToDo = (props) => {\n\n  let settingValue = useContext(SettingContext);\n  const [list, setList] = useState([]);\n  const [endpage, setendpage] = useState(settingValue.pagination);//2\n  const [incomplete, setIncomplete] = useState([]);\n  const { handleChange, handleSubmit } = useForm(addItem);\n  const[show,setShow]=useState(false);\n  const [completeList, setcompleteList] =useState([]);;\n\n  function addItem(item) {\n    console.log(item);\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n  }\n\n  function deleteItem(id) {\n    const items = list.filter(item => item.id !== id);\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n\n    const items = list.map(item => {\n      if (item.id == id) {\n        item.complete = !item.complete;\n      }\n      return item;\n    });\n\n    setList(items);\n\n  }\n\n  useEffect(() => {\n    let incompleteCount = list.filter(item => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incomplete}`;\n  }, [list]);\n\n  const paginate = (e) => {\n\n    let start = endpage - settingValue.pagination;\n    return list.slice(start, endpage);\n\n  }\n\n  const Next = (e) => {\n    e.preventDefault();\n    setendpage(endpage + settingValue.pagination);\n\n\n  }\n\n\n  const Previous = (e) => {\n    e.preventDefault();\n    setendpage(endpage - settingValue.pagination);\n\n\n  }\n  function showIfComplete() {\n    let completeList = [];\n    list.map(item => {\n      if (item.complete == true) {\n\n        completeList.push(item)\n      }\n\n    })\n    setShow(true);\n    setcompleteList(completeList);\n  }\n\n  return (\n    <>\n      <div className=\"Classes.ELEVATION_*\" class='app'>\n        <Card interactive={true} elevation={Elevation.TWO} >\n          <header class='header'>\n            <h1 className=\"h1\">To Do List: {incomplete} items pending</h1>\n          </header>\n          <h2>Add To Do Item</h2>\n          <form onSubmit={handleSubmit}>\n            <FormGroup label=\"To Do Item\" >\n              <InputGroup onChange={handleChange} name=\"text\" type=\"text\" placeholder=\"Item Details\"  ></InputGroup>\n\n            </FormGroup>\n            <FormGroup label=\"Assigned To\" >\n              <InputGroup onChange={handleChange} name=\"assignee\" type=\"text\" placeholder=\"Assignee Name\"></InputGroup>\n\n            </FormGroup>\n            <FormGroup label=\"Difficulty\" >\n              <InputGroup onChange={handleChange} defaultValue={3} type=\"range\" min={1} max={5} name=\"difficulty\" >\n              </InputGroup>\n\n            </FormGroup>\n            <FormGroup>\n            </FormGroup>\n\n            <Button className=\"bp3-intent-primary\" type=\"submit\">Add Item</Button>\n          </form>\n\n        </Card>\n\n\n      </div>\n\n\n\n      {/* {paginate().map(item => ( */}\n\n       {/* <div key={item.id}> */}\n          {/* <p>{item.text}</p> */}\n          {/* <p><small>Assigned to: {item.assignee}</small></p> */}\n          {/* <p><small>Difficulty: {item.difficulty}</small></p> */}\n          {/* <Button type=\"button\" class=\"bp3-button.bp3-intent-danger\" onClick={() => deleteItem((item.id))}>delete</Button> */}\n          {/* <button onClick={() => deleteItem((item.id))}> delete</button> */}\n          {/* <Switch  label=\"Complete\" onClick={() => toggleComplete(item.id)}/>{item.complete ? true : false} */}\n          {/* <div onClick={() => toggleComplete(item.id)}><Button className='bp3-icon'>{item.complete ? \"Complete\" : \"Pending\"}</Button></div> */}\n      \n          {/* <hr />\n\n        </div>\n      ))} */}\n\n\n\n    \n      \n    <TodoList toggleComplete={toggleComplete}\n    paginate={paginate}\n    deleteItem={deleteItem}/>\n    <Button className=\"bp3-intent-primary\" type=\"click\" onClick={showIfComplete}>Completed Item</Button>\n     {/* <button onClick={showIfComplete}>Completed Item</button> */}\n      <button onClick={Previous}> Previous</button>\n      <button onClick={Next}> Next</button>\n      { show&&<List showIfComplete={showIfComplete}\n      completeList={completeList}/>\n\n     \n      \n}\n    </>\n  );\n};\n\nexport default ToDo;\n","import React from 'react';\nimport Header from './components/Header/Header.js';\nimport ToDo from './components/todo/todo.js';\nimport Settings from './context/Settings.js';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n     \n      <Settings>\n         <Header/>\n      <ToDo />\n      </Settings>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app.js';\n\nclass Main extends React.Component {\n  render() {\n    return <App />;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}