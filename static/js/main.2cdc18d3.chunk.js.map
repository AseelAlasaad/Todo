{"version":3,"sources":["context/Settings.js","components/Header/Header.js","hooks/form.js","components/todo/List.js","components/todo/TodoList.js","components/todo/Pagination.js","components/todo/Todo.js","components/todo/UpdateSetting.js","App.js","index.js"],"names":["SettingContext","React","createContext","Settings","props","useState","localStorage","getItem","pagination","setPagination","hide","setHide","state","setSortBy","listComplete","Provider","value","children","Header","className","Group","align","Alignment","LEFT","Heading","Divider","href","icon","text","Component","useForm","callback","values","setValues","handleChange","event","persist","target","name","handleSubmit","preventDefault","List","interactive","elevation","Elevation","TWO","completeList","map","item","assignee","difficulty","id","TodoList","list","onClick","deleteItem","xmlns","width","height","fill","class","viewBox","d","toggleComplete","complete","Pagination","pageNumbers","totalTodos","endpage","Page","i","Math","ceil","push","number","Todo","settingValue","useContext","setList","incomplete","setIncomplete","console","log","uuid","show","setShow","setcompleteList","currentPage","setcurrentPage","items","useEffect","incompleteCount","filter","length","document","title","paginate","e","start","slice","showIfComplete","indexOfLastTodo","parseInt","indexOfFirstTodo","currentTodos","onSubmit","label","onChange","type","placeholder","defaultValue","min","max","pageNumber","UpdateSetting","context","Container","Form","Label","Control","as","setItem","updateNum","sortItem","setShowCompleted","App","exact","path","Main","rootElement","getElementById","ReactDOM","render"],"mappings":"+MAEaA,EAAiBC,IAAMC,gBA+BrBC,MA5Bf,SAAkBC,GAClB,MAAkCC,mBAASC,aAAaC,QAAQ,gBAAhE,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsBJ,mBAASC,aAAaC,QAAQ,kBAApD,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA4BN,mBAASC,aAAaC,QAAQ,WAA1D,mBAEMK,GAFN,KAEY,CACRJ,aACAK,UAJJ,KAKIH,OACAI,aAAa,GACbL,cAAcA,EACdE,QAAQA,IASZ,OACI,cAACX,EAAee,SAAhB,CAAyBC,MAAOJ,EAAhC,SACKR,EAAMa,Y,yBClBTC,E,4JACJ,WAEE,OAEK,mCACD,cAAC,IAAD,CAAQC,UAAU,sBAAlB,SACE,eAAC,IAAOC,MAAR,CAAcC,MAAOC,IAAUC,KAA/B,UACE,cAAC,IAAOC,QAAR,yBACA,cAAC,IAAOC,QAAR,IACA,mBAAGC,KAAK,UAAR,SACE,cAAC,IAAD,CAAQP,UAAU,cAAcQ,KAAK,WAAWC,KAAK,eAGvD,mBAAGF,KAAK,YAAR,SACE,cAAC,IAAD,CAAQP,UAAU,cAAcQ,KAAK,OAAOC,KAAK,sB,GAf1C3B,IAAM4B,WA4BZX,I,uBCdAY,EArBC,SAACC,GAEf,MAA4B1B,mBAAS,IAArC,mBAAO2B,EAAP,KAAeC,EAAf,KAYA,MAAO,CACLC,aANmB,SAACC,GACpBA,EAAMC,UACNH,GAAU,SAAAD,GAAM,kCAAUA,GAAV,kBAAmBG,EAAME,OAAOC,KAAOH,EAAME,OAAOrB,YAKpEuB,aAZmB,SAACJ,GAChBA,GAAOA,EAAMK,iBACjBT,EAASC,IAWTA,W,QCaWS,MA5Bf,SAAcrC,GACV,OACI,mCAEI,eAAC,IAAD,CAAMsC,aAAa,EAAMC,UAAWC,IAAUC,IAA9C,UACI,+CACCzC,EAAM0C,aAAaC,KAAI,SAAAC,GAAI,OAExB,gCACI,4BAAIA,EAAKpB,OACT,4BAAG,kDAAqBoB,EAAKC,cAC7B,4BAAG,iDAAoBD,EAAKE,gBAC5B,yBAJMF,EAAKG,aCYpBC,MAtBf,SAAkBhD,GACd,OACI,mCACKA,EAAMiD,KAAKN,KAAI,SAAAC,GAAI,OAEhB,gCACI,4BAAIA,EAAKpB,OACT,4BAAG,kDAAqBoB,EAAKC,cAC7B,4BAAG,iDAAoBD,EAAKE,gBAC5B,cAAC,IAAD,CAAQ/B,UAAU,SAAUmC,QAAS,kBAAMlD,EAAMmD,WAAYP,EAAKG,KAAlE,SAAwE,qBAAKK,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,KAAK,eAAeC,MAAM,sBAAsBC,QAAQ,YAAvH,SAC1F,sBAAMC,EAAE,gQAIU,qBAAKR,QAAS,kBAAKlD,EAAM2D,eAAef,EAAKG,KAA7C,SAAkD,cAAC,IAAD,CAAQhC,UAAU,WAAlB,SAA8B6B,EAAKgB,SAAW,WAAa,cAC7G,yBAVMhB,EAAKG,U,uBCkBhBc,MAvBf,YAEI,IAFuD,IAArCC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,QACrCC,EAAO,GACJC,EAAI,EAAGA,EAAIC,KAAKC,KAAKL,EAAaC,GAAUE,IACjDD,EAAKI,KAAKH,GAGd,OACI,mCACI,qBAAMnD,UAAU,uBAAhB,SACI,oBAAIA,UAAU,kBAAd,SACKkD,EAAKtB,KAAI,SAAA2B,GAAM,OACZ,oBAAiBvD,UAAU,YAA3B,SACI,wBAAQmC,QAAS,kBAAMY,EAAYQ,IAASvD,UAAU,YAAtD,SACKuD,KAFAA,aCyIlBC,MA3If,SAAcvE,GAEZ,IAAIwE,EAAeC,qBAAW7E,GAC9B,EAAwBK,mBAAS,IAAjC,mBAAOgD,EAAP,KAAayB,EAAb,KACA,EAA8BzE,mBAASuE,EAAapE,YAApD,mBAAO4D,EAAP,KACA,GADA,KACoC/D,mBAAS,KAA7C,mBAAO0E,EAAP,KAAmBC,EAAnB,KACA,EAAuClD,GAMvC,SAAiBkB,GACfiC,QAAQC,IAAIlC,GACZA,EAAKG,GAAKgC,cACVnC,EAAKgB,UAAW,EAChBc,EAAQ,GAAD,mBAAKzB,GAAL,CAAWL,QAVZd,EAAR,EAAQA,aAAcK,EAAtB,EAAsBA,aACtB,EAAoBlC,oBAAS,GAA7B,mBAAM+E,EAAN,KAAWC,EAAX,KACA,EAAuChF,mBAAS,IAAhD,mBAAOyC,EAAP,KAAqBwC,EAArB,KACA,EAAmCjF,mBAAS,GAA5C,mBAAOkF,EAAP,KAAmBC,EAAnB,KACA,EAAwBnF,mBAASuE,EAAajE,SAc9C,SAASoD,EAAeZ,GAEtB,IAAMsC,EAAQpC,EAAKN,KAAI,SAAAC,GAIrB,OAHIA,EAAKG,IAAMA,IACbH,EAAKgB,UAAYhB,EAAKgB,UAEjBhB,KAGT8B,EAAQW,GAvBV,oBA2BAC,qBAAU,WACR,IAAIC,EAAkBtC,EAAKuC,QAAO,SAAA5C,GAAI,OAAKA,EAAKgB,YAAU6B,OAC1Db,EAAcW,GACdG,SAASC,MAAT,sBAAgChB,KAC/B,CAAC1B,IAEJ,IAAM2C,EAAW,SAACC,GAEhB,IAAIC,EAAQ9B,EAAUQ,EAAapE,WACnC,OAAO6C,EAAK8C,MAAMD,EAAO9B,IAU3B,SAASgC,IACP,IAAItD,EAAe,GACnBO,EAAKN,KAAI,SAAAC,GACc,GAAjBA,EAAKgB,UAEPlB,EAAa2B,KAAKzB,MAItBqC,GAAQ,GACRC,EAAgBxC,GAGlB,IAAMuD,EAAkBd,EAAce,SAASlC,GACzCmC,EAAmBF,EAAkBC,SAASlC,GAC9CoC,EAAenD,EAAK8C,MAAMI,EAAkBF,GAGlD,OACE,qCACE,qBAAKlF,UAAU,sBAAsByC,MAAM,MAA3C,SACE,eAAC,IAAD,CAAMlB,aAAa,EAAMC,UAAWC,IAAUC,IAA9C,UACE,wBAAQe,MAAM,SAAd,SACE,qBAAIzC,UAAU,KAAd,yBAAgC4D,EAAhC,sBAEF,gDACA,uBAAM0B,SAAUlE,EAAhB,UACE,cAAC,IAAD,CAAWmE,MAAM,aAAjB,SACE,cAAC,IAAD,CAAYC,SAAUzE,EAAcI,KAAK,OAAOsE,KAAK,OAAOC,YAAY,mBAG1E,cAAC,IAAD,CAAWH,MAAM,cAAjB,SACE,cAAC,IAAD,CAAYC,SAAUzE,EAAcI,KAAK,WAAWsE,KAAK,OAAOC,YAAY,oBAG9E,cAAC,IAAD,CAAWH,MAAM,aAAjB,SACE,cAAC,IAAD,CAAYC,SAAUzE,EAAc4E,aAAc,EAAGF,KAAK,QAAQG,IAAK,EAAGC,IAAK,EAAG1E,KAAK,iBAIzF,cAAC,IAAD,IAGA,cAAC,IAAD,CAAQnB,UAAU,qBAAqByF,KAAK,SAA5C,8BAUR,cAAC,EAAD,aAAU7C,eAAgBA,EAC1BiC,SAAUA,EACVzC,WA5FF,SAAoBJ,GAClB,IAAMsC,EAAQpC,EAAKuC,QAAO,SAAA5C,GAAI,OAAIA,EAAKG,KAAOA,KAC9C2B,EAAQW,IA2FRpC,KAAMmD,GAA8BnD,GAHpC,iBAIgBU,IACfyC,EAAaX,OAAO,GACvB,cAAC,EAAD,CAAYG,SAAUA,EACX5B,QAASA,EACTD,WAAYd,EAAKwC,OACjB3B,YA7CS,SAAA+C,GAAU,OAAIzB,EAAeyB,MAiD/C,cAAC,IAAD,CAAQ9F,UAAU,qBAAqByF,KAAK,QAAQtD,QAAS8C,EAA7D,4BAGCb,EAAa,GAAK,wBAAQjC,QAAS,WAAQkC,EAAeD,EAAc,IAAtD,sBAClBA,GAAenB,GAAW,wBAAQd,QAAS,WAAQkC,EAAeD,EAAc,IAAtD,kBAIvBH,GAAM,cAAC,EAAD,CAAMgB,eAAgBA,EAC9BtD,aAAcA,Q,gBCvELoE,MAjEf,WACI,IAAMC,EAAUtC,qBAAW7E,GAe3B,OACI,8BAaY,cAACoH,EAAA,EAAD,CAAWjG,UAAU,eAArB,SACI,eAACkG,EAAA,EAAD,WACA,eAACA,EAAA,EAAKjG,MAAN,WACQ,cAACiG,EAAA,EAAKC,MAAN,CAAYnG,UAAU,OAAtB,4BACA,eAACkG,EAAA,EAAKE,QAAN,CAAcC,GAAG,SAASV,aAAcxG,aAAaC,QAAQ,eAAgBoG,SAAU,SAAAV,GAAC,OAhCpH,SAAmBA,GACfkB,EAAQ1G,cAAcwF,EAAE5D,OAAOrB,OAC/BV,aAAamH,QAAQ,cAAexB,EAAE5D,OAAOrB,OA8BuE0G,CAAUzB,IAAtG,UACI,wBAAQjF,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,qBAIR,eAACqG,EAAA,EAAKjG,MAAN,WACI,cAACiG,EAAA,EAAKC,MAAN,CAAYnG,UAAU,YAAtB,qBAEA,eAACkG,EAAA,EAAKE,QAAN,CAAcC,GAAG,SAASV,aAAcxG,aAAaC,QAAQ,UAAWoG,SAAU,SAAAV,GAAC,OAvC5G,SAAkBA,GACdkB,EAAQtG,UAAUoF,EAAE5D,OAAOrB,OAC3BV,aAAamH,QAAQ,SAASxB,EAAE5D,OAAOrB,OAqCqE2G,CAAS1B,IAAhG,UACI,wBAAQjF,MAAM,UAAd,qBACA,wBAAQA,MAAM,UAAd,2BAGR,eAACqG,EAAA,EAAKjG,MAAN,WACI,cAACiG,EAAA,EAAKC,MAAN,CAAYnG,UAAU,YAAtB,6BACA,eAACkG,EAAA,EAAKE,QAAN,CAAcC,GAAG,SAASV,aAAcxG,aAAaC,QAAQ,iBAAkBoG,SAAU,SAAAV,GAAC,OAzCnH,SAA0BA,GACzBkB,EAAQxG,QAAQsF,EAAE5D,OAAOrB,OACzBV,aAAamH,QAAQ,gBAAiBxB,EAAE5D,OAAOrB,OAuCuE4G,CAAiB3B,IAA/G,UACI,wBAAQjF,MAAM,OAAd,kBACA,wBAAQA,MAAM,QAAd,gC,eCjDf6G,E,4JACnB,WACE,OACE,qCACU,cAAC,EAAD,IACR,cAAC,IAAD,UACE,cAAC,IAAD,UAEE,eAAC,EAAD,WAEE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,WAAlB,SAEE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,YAAlB,SAEE,cAAC,EAAD,oB,GAhBiB9H,IAAM4B,WCPjCmG,E,4JACJ,WACE,OAAO,cAAC,EAAD,Q,GAFQ/H,IAAM4B,WAMnBoG,EAAcnC,SAASoC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAAUH,K","file":"static/js/main.2cdc18d3.chunk.js","sourcesContent":["import React, { useState, useEffect} from 'react';\n\nexport const SettingContext = React.createContext();\n\n\nfunction Settings(props){\nconst [pagination, setPagination]=useState(localStorage.getItem('ItemPerpage'));\nconst [hide, setHide]=useState(localStorage.getItem('showCompleted'));\nconst [sortBy, setSortBy] = useState(localStorage.getItem(\"SortBy\"));\n\nconst state={\n    pagination,\n    setSortBy:setSortBy,\n    hide,\n    listComplete:[],\n    setPagination:setPagination,\n    setHide:setHide\n}\n// useEffect(()=>{\n//     let arrayOfnumber=localStorage.getItem('ItemPerpage');\n//     console.log(arrayOfnumber);\n//     if(arrayOfnumber){\n//         setPagination(parseInt(arrayOfnumber));\n//     }\n// },[])\nreturn(\n    <SettingContext.Provider value={state}>\n        {props.children}\n    </SettingContext.Provider>\n)\n\n}\n\nexport default Settings;","import React from 'react';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport {\n  Navbar,\n  Alignment,\n  Button,\n} from \"@blueprintjs/core\";\n\n\nclass Header extends React.Component {\n  render() {\n\n    return (\n     \n         <>\n        <Navbar className=\"bp3-navbar bp3-dark\">\n          <Navbar.Group align={Alignment.LEFT}>\n            <Navbar.Heading>To Do List</Navbar.Heading>\n            <Navbar.Divider />\n            <a href=\"setting\">\n              <Button className=\"bp3-minimal\" icon=\"settings\" text=\"Settings\" />\n\n            </a>\n            <a href=\"/todo-app\">\n              <Button className=\"bp3-minimal\" icon=\"home\" text=\"Home\" />\n\n            </a>\n          </Navbar.Group>\n        </Navbar>\n        </>\n\n   \n    );\n  }\n}\n\n\nexport default Header;","import { useState } from 'react';\n\nconst useForm = (callback) => {\n\n  const [values, setValues] = useState({});\n\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n    callback(values);\n  };\n\n  const handleChange = (event) => {\n    event.persist();\n    setValues(values => ({ ...values, [event.target.name]: event.target.value }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n  };\n};\n\nexport default useForm;\n","import React from \"react\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n// import \"~@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport { Card, Elevation } from \"@blueprintjs/core\";\nfunction List(props) {\n    return (\n        <>\n\n            <Card interactive={true} elevation={Elevation.TWO}>\n                <p>Completed Task</p>\n                {props.completeList.map(item => (\n\n                    <div key={item.id}>\n                        <p>{item.text}</p>\n                        <p><small>Assigned to: {item.assignee}</small></p>\n                        <p><small>Difficulty: {item.difficulty}</small></p>\n                        <hr />\n\n                    </div>\n                ))}\n            </Card>\n            \n\n        </>\n\n    );\n\n\n\n\n}\n\nexport default List;","import React from \"react\";\nimport { Button, Card, FormGroup, InputGroup, Elevation, Switch } from \"@blueprintjs/core\";\nfunction TodoList(props) {\n    return (\n        <>\n            {props.list.map(item => (\n\n                <div key={item.id}>\n                    <p>{item.text}</p>\n                    <p><small>Assigned to: {item.assignee}</small></p>\n                    <p><small>Difficulty: {item.difficulty}</small></p>\n                    <Button className='danger'  onClick={() => props.deleteItem((item.id))}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-x-square-fill\" viewBox=\"0 0 16 16\">\n  <path d=\"M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm3.354 4.646L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 1 1 .708-.708z\"/>\n</svg></Button>\n                    {/* <button onClick={() => deleteItem((item.id))}> delete</button> */}\n                    {/* <Switch  label=\"Complete\" onClick={() => toggleComplete(item.id)}/>{item.complete ? true : false} */}\n                    <div onClick={() =>props.toggleComplete(item.id)}><Button className='bp3-icon'>{item.complete ? \"Complete\" : \"Pending\"}</Button></div>\n                    <hr />\n\n                </div>\n            ))}\n        </>\n    )\n}\nexport default TodoList;","import React from \"react\";\nimport ReactPaginate from \"react-paginate\";\nfunction Pagination({ pageNumbers, totalTodos, endpage }) {\n    const Page = [];\n    for (let i = 1; i < Math.ceil(totalTodos / endpage); i++) {\n        Page.push(i);\n        1\n    }\n    return (\n        <>\n            <nav  className=\"pagination-contianer\">\n                <ul className='pagination-list'>\n                    {Page.map(number => (\n                        <li key={number} className='page-item'>\n                            <button onClick={() => pageNumbers(number)} className='page-link'>\n                                {number}\n                            </button>\n                        </li>\n                    ))}\n                </ul>\n            </nav>\n        </>\n    )\n}\n\nexport default Pagination;","import React, { useEffect, useState, useContext } from 'react';\nimport useForm from '../../hooks/form.js';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n// import \"~@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport { Button, Card, FormGroup, InputGroup, Elevation, Switch } from \"@blueprintjs/core\";\nimport List from './List';\nimport TodoList from './TodoList';\nimport { v4 as uuid } from 'uuid';\nimport './style.css';\nimport Pagination from './Pagination';\nimport { SettingContext } from '../../context/Settings';\nfunction Todo(props){\n\n  let settingValue = useContext(SettingContext);\n  const [list, setList] = useState([]);\n  const [endpage, setendpage] = useState(settingValue.pagination);//2\n  const [incomplete, setIncomplete] = useState([]);\n  const { handleChange, handleSubmit } = useForm(addItem);\n  const[show,setShow]=useState(false);\n  const [completeList, setcompleteList] =useState([]);\n  const [currentPage,setcurrentPage]=useState(1);\n  const [showCompleted] = useState(settingValue.setHide);\n\n  function addItem(item) {\n    console.log(item);\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n  }\n\n  function deleteItem(id) {\n    const items = list.filter(item => item.id !== id);\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n\n    const items = list.map(item => {\n      if (item.id == id) {\n        item.complete = !item.complete;\n      }\n      return item;\n    });\n\n    setList(items);\n\n  }\n\n  useEffect(() => {\n    let incompleteCount = list.filter(item => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incomplete}`;\n  }, [list]);\n\n  const paginate = (e) => {\n\n    let start = endpage - settingValue.pagination;\n    return list.slice(start, endpage);\n\n  }\n\n  function handleHide() {\n    settingValue.setHide(settingValue.hide);\n  }\n\n  \n\n  function showIfComplete() {\n    let completeList = [];\n    list.map(item => {\n      if (item.complete == true) {\n\n        completeList.push(item)\n      }\n\n    })\n    setShow(true);\n    setcompleteList(completeList);\n  }\n\n  const indexOfLastTodo = currentPage * parseInt(endpage);\n  const indexOfFirstTodo = indexOfLastTodo - parseInt(endpage);\n  const currentTodos = list.slice(indexOfFirstTodo, indexOfLastTodo);\n\n  const pageNumbers = pageNumber => setcurrentPage(pageNumber);\n  return (\n    <>\n      <div className=\"Classes.ELEVATION_*\" class='app'>\n        <Card interactive={true} elevation={Elevation.TWO} >\n          <header class='header'>\n            <h1 className=\"h1\">To Do List: {incomplete} items pending</h1>\n          </header>\n          <h2>Add To Do Item</h2>\n          <form onSubmit={handleSubmit}>\n            <FormGroup label=\"To Do Item\" >\n              <InputGroup onChange={handleChange} name=\"text\" type=\"text\" placeholder=\"Item Details\"  ></InputGroup>\n\n            </FormGroup>\n            <FormGroup label=\"Assigned To\" >\n              <InputGroup onChange={handleChange} name=\"assignee\" type=\"text\" placeholder=\"Assignee Name\"></InputGroup>\n\n            </FormGroup>\n            <FormGroup label=\"Difficulty\" >\n              <InputGroup onChange={handleChange} defaultValue={3} type=\"range\" min={1} max={5} name=\"difficulty\" >\n              </InputGroup>\n\n            </FormGroup>\n            <FormGroup>\n            </FormGroup>\n\n            <Button className=\"bp3-intent-primary\" type=\"submit\">Add Item</Button>\n          </form>\n\n        </Card>\n\n\n      </div>\n\n\n      \n    <TodoList toggleComplete={toggleComplete}\n    paginate={paginate}\n    deleteItem={deleteItem}\n    list={currentTodos ? currentTodos : list}\n    toggleComplete={toggleComplete}/>\n    {currentTodos.length>0 && \n  <Pagination paginate={paginate}\n             endpage={endpage}\n             totalTodos={list.length}\n             pageNumbers={pageNumbers}\n             />\n}\n\n    <Button className=\"bp3-intent-primary\" type=\"click\" onClick={showIfComplete}>Completed Item</Button>\n    {/* Create Next Previous buttons */} \n\n    {currentPage >1 && <button onClick={() => { setcurrentPage(currentPage - 1) }}>Previous</button>}\n    {currentPage >= endpage && <button onClick={() => { setcurrentPage(currentPage + 1) }} >Next</button>}\n     \n   \n  \n      { show&&<List showIfComplete={showIfComplete}\n      completeList={completeList}/> }\n\n\n \n    </>\n  );\n};\n\nexport default Todo;\n","import React, { useContext } from 'react';\nimport { SettingContext } from '../../context/Settings';\nimport { FormGroup, Card, Elevation, InputGroup } from \"@blueprintjs/core\";\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\n\nfunction UpdateSetting() {\n    const context = useContext(SettingContext)\n    function updateNum(e) {\n        context.setPagination(e.target.value);\n        localStorage.setItem('ItemPerpage', e.target.value);\n\n    }\n       function sortItem(e){\n           context.setSortBy(e.target.value);\n           localStorage.setItem('SortBy',e.target.value);\n       }\n\n       function setShowCompleted(e) {\n        context.setHide(e.target.value);\n        localStorage.setItem(\"showCompleted\", e.target.value)\n    }\n    return (\n        <div >\n\n\n            {/* <Card interactive={true} elevation={Elevation.TWO}>\n                        <form>\n\n                            <h5>Update Number of item perPage</h5>\n                            <FormGroup  >\n                                <InputGroup type=\"text\" onChange={updateNum} />\n                            </FormGroup>\n                        </form>\n                    </Card> */}\n\n                    <Container className=\"mx-auto mt-5\">\n                        <Form>\n                        <Form.Group>\n                                <Form.Label className=\"mb-0\">Items per Page</Form.Label>\n                                <Form.Control as=\"select\" defaultValue={localStorage.getItem(\"ItemPerpage\")} onChange={e => updateNum(e)}>\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                    <option value=\"4\">4</option>\n                                    <option value=\"5\">5</option>\n                                </Form.Control>\n                            </Form.Group>\n               \n                            <Form.Group>\n                                <Form.Label className=\"mt-2 mb-0\">Sort By</Form.Label>\n                              \n                                <Form.Control as=\"select\" defaultValue={localStorage.getItem(\"SortBy\")} onChange={e => sortItem(e)}>\n                                    <option value=\"Easiest\">Easiest</option>\n                                    <option value=\"Hardest\">Hardest</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label className=\"mt-2 mb-0\">Completed Items</Form.Label>\n                                <Form.Control as=\"select\" defaultValue={localStorage.getItem(\"showCompleted\")} onChange={e => setShowCompleted(e)}>\n                                    <option value=\"true\">show</option>\n                                    <option value=\"false\">hide</option>\n                                </Form.Control>\n                            </Form.Group>\n                        </Form>\n                    </Container>\n\n        </div>\n    )\n}\n\nexport default UpdateSetting;","import React from 'react';\n\nimport Settings from './context/Settings.js';\nimport Header from './components/Header/Header.js';\nimport Todo from './components/todo/Todo.js';\nimport UpdateSetting from './components/todo/UpdateSetting.js';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nexport default class App extends React.Component {\n  render() {\n    return (\n      <>\n                <Header />\n        <Router>\n          <Switch>\n\n            <Settings>\n\n              <Route exact path=\"/setting\">\n\n                <UpdateSetting />\n              </Route>\n              <Route exact path=\"/todo-app\">\n                {/* <Header /> */}\n                <Todo />\n              </Route>\n\n            </Settings>\n\n          </Switch>\n        </Router>\n\n      </>\n\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nclass Main extends React.Component {\n  render() {\n    return <App/>;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}